import de.gesellix.gradle.docker.tasks.*

import static groovy.json.JsonOutput.prettyPrint
import static groovy.json.JsonOutput.toJson

/*
buildscript {
  repositories {
    mavenLocal()
    jcenter()
    maven { url 'http://dl.bintray.com/gesellix/docker-utils' }
    maven { url "https://plugins.gradle.org/m2/" }
  }
// works with Gradle < 2.1
//  dependencies {
//    classpath 'com.github.ben-manes:gradle-versions-plugin:0.9'
//    classpath 'de.gesellix:gradle-docker-plugin:2015-05-06T06-17-42'
//  }
}
//apply plugin: 'com.github.ben-manes.versions'
//apply plugin: "de.gesellix.docker"
*/

// works with Gradle 2.1+, for the old configuration see http://plugins.gradle.org/plugin/de.gesellix.docker
plugins {
// buildImage, buildAndPush, runContainer works with this version of the plugin:
//  id "de.gesellix.docker" version "2015-03-07T20-17-57"

// deployToServer works with these versions, but buildImage breaks:
//id "de.gesellix.docker" version "2015-04-11T22-32-01"
//id "de.gesellix.docker" version "2015-04-22T09-44-36"
  id "de.gesellix.docker" version "2015-05-06T06-17-42"
}

// only to help IntelliJ recognize the imports for the Docker*Task classes
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse-wtp'
apply plugin: 'groovy'
apply plugin: 'eclipse'

repositories {
  mavenLocal()
  maven { url 'http://dl.bintray.com/gesellix/docker-utils' }
  mavenCentral()
}

ext {
  localDockerHost = "unix:///var/run/docker.sock"

// Run docker daemon with http
  remoteDockerHost = "http://xxx.yyyy.net:2375"

// Run docker daemon with https
//remoteDockerHost = "https://xxx.yyyy.net:2376"

  appName = "ppppp/qqqqqq"
  appTag = "latest"

// fallback to ~/.dockercfg
// For use with readDefaultAuthConfig() for pulling image from docker hub
// deploying to remote server.
  dockerCfgFilename = null
  registryHostname = null
}

allprojects {
  apply plugin: "de.gesellix.docker"

  docker {
    dockerHost = localDockerHost
    authConfigPlain = ["username"     : "user",
                       "password"     : "user_password",
                       "email"        : "user@blah.com",
                       "serveraddress": "https://index.docker.io/v1/"]
  }
}

dependencies {
  compile group: 'com.wordnik', name: 'swagger-jaxrs_2.9.1', version: '1.2.1'
  compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.6.3'
  compile group: 'javax.servlet', name: 'servlet-api', version: '2.5'
  testCompile group: 'org.scalatest', name: 'scalatest_2.9.1', version: '1.6.1'
  testCompile group: 'junit', name: 'junit', version: '4.8.1'
}

task info(type: DockerInfoTask) {
  doLast {
    println prettyPrint(toJson(info))
  }
}

task version(type: DockerVersionTask) {
  doLast {
    println prettyPrint(toJson(version))
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.2.1'
  distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

task buildAndPush(type: DockerPublishTask) {
// Push to the Docker hub.
  imageName = appName
  imageTag = appTag
  buildContextDirectory = file('./docker/')
  targetRegistries = [
      dev: "registry.hub.docker.com"
  ]
}

task rmImage(type: DockerRmiTask) {
  imageId = appName
}

task copyWARToBuildContext(type: Copy) {
  // Copy the .war file into the docker directory.
  from war
  into file('./docker/')
  include '*.war'
}

task buildImage(type: DockerBuildTask) {
//dependsOn rmImage
  dependsOn copyWARToBuildContext

  dockerHost = localDockerHost
  imageName = appName
//imageName = appName + ":" + appTag

  buildContextDirectory = file("./docker/")
}

task stopContainer(type: DockerStopTask) {
  dependsOn buildImage
  containerId = "ppppp/qqqqqq"
}

task rmContainer(type: DockerRmTask) {
  dependsOn stopContainer
  containerId = "ppppp/qqqqqq"
}

task runContainer(type: DockerRunTask) {
  dependsOn rmContainer
  dockerHost = remoteDockerHost
  imageName = 'ppppp/qqqqqq'
  tag = "latest"
  containerConfiguration = [
      "ExposedPorts": ["8888": [:], "8080": [:]],
      "HostConfig"  : [
          "PortBindings": ["8888": [["HostPort": "8888"]]]]]
}

task pullImage(type: DockerPullTask) {
//dependsOn pushImage

  imageName = 'ppppp/qqqqqq'
  tag = 'latest'
}

/*

To use these tasks, include the later plugin version
task pushImageToPrivateRepo(type: DockerPushTask) { repositoryName = 'ppppp/qqqqqq' authConfigPlain = getDockerClient().readAuthConfig(registryHostname, dockerCfgFilename) }
task deployToServer(type: DockerPullTask) {
imageName = 'ppppp/qqqqqq'
tag = "latest"
dockerHost = remoteDockerHost
authConfigPlain = getDockerClient().readDefaultAuthConfig()
}
*/
